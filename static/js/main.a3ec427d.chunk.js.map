{"version":3,"sources":["components/Header.js","components/Text.js","components/TextCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","sessionStorage","setItem","classes","this","AppBar","position","className","nav","Toolbar","Typography","title","variant","Component","withStyles","theme","background","textAlign","Text","returnTheme","createMuiTheme","palette","primary","main","showTitle","style","marginBottom","marginTop","Container","container","Grid","spacing","item","xs","sm","ThemeProvider","TextField","id","label","margin","onChange","inputChangeHandler","inputbox","Button","onClick","requestSummaryHandler","preview","width","maxWidth","marginLeft","marginRight","color","deleteB","useStyles","makeStyles","root","minWidth","bullet","display","transform","fontSize","pos","TextCard","Card","CardContent","component","summaryText","App","e","setState","userInput","target","value","getSummary","state","reviewJSON","text","axios","post","then","response","console","log","data","catch","error","alert","direction","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uRAiBMA,E,kDACJ,WAAYC,GAAO,IAAD,6BACd,cAAMA,GACNC,eAAeC,QAAQ,UAAW,IAFpB,E,qDAKT,IACDC,EAAYC,KAAKJ,MAAjBG,QACR,OACE,6BACE,kBAACE,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAWJ,EAAQK,KAC3C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYH,UAAWJ,EAAQQ,MAAOC,QAAQ,MAA9C,0B,GAZWC,aAqBNC,eAhCG,SAAAC,GAAK,MAAK,CACxBP,IAAK,CACDQ,WAAY,WAIhBL,MAAO,CACHM,UAAY,aAyBLH,CAAsBf,G,qDCY/BmB,E,4MAEFC,YAAc,WAQV,OAPcC,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,e,EAQtBC,UAAY,WACJ,OAAO,kBAACd,EAAA,EAAD,CAAYE,QAAQ,KAAKa,MAAO,CAAEC,aAAc,KAAMC,UAAW,OAAjE,oC,uDAIL,IACExB,EAAYC,KAAKJ,MAAjBG,QACR,OACI,6BACKC,KAAKoB,YACN,kBAACI,EAAA,EAAD,CAAWrB,UAAWJ,EAAQ0B,WAE1B,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,GACrB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,CAAepB,MAAOX,KAAKe,eACvB,kBAACiB,EAAA,EAAD,CACIC,GAAG,SACHC,MAAM,OACNC,OAAO,SACP3B,QAAQ,WACR4B,SAAUpC,KAAKJ,MAAMyC,mBACrBlC,UAAWJ,EAAQuC,eAMvC,6BACA,6BACA,6BACA,kBAACC,EAAA,EAAD,CAAQC,QAASxC,KAAKJ,MAAM6C,sBAAuBtC,UAAWJ,EAAQ2C,SAAtE,sB,GA5CGjC,aAkDJC,eAzFA,SAAAC,GAAK,MAAK,CAErB2B,SAAU,CACNK,MAAO,OACPC,SAAU,OACV1C,SAAW,YAGfwC,QAAS,CACLnB,UAAWZ,EAAMgB,QAAQ,GACzBL,aAAcX,EAAMgB,QAAQ,GAC5BkB,WAAYlC,EAAMgB,QAAQ,GAC1BmB,YAAanC,EAAMgB,QAAQ,GAC3Bf,WAAY,UACZmC,MAAO,QACP,UAAW,CACPnC,WAAY,YAGpBoC,QAAS,CACLzB,UAAWZ,EAAMgB,QAAQ,GACzBL,aAAcX,EAAMgB,QAAQ,GAC5BkB,WAAYlC,EAAMgB,QAAQ,GAC1BmB,YAAanC,EAAMgB,QAAQ,GAC3Bf,WAAY,UACZmC,MAAO,QACP,UAAW,CACPnC,WAAY,YAKpBa,UAAW,CACPU,OAAQ,OACRS,SAAU,aAuDHlC,CAAmBI,G,2BC5F5BmC,EAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTnB,OAAQ,QACRoB,UAAW,cAEbhD,MAAO,CACLiD,SAAU,IAEZC,IAAK,CACHnC,aAAc,MAIdoC,E,uKAEK,IACC3D,EAAYC,KAAKJ,MAAjBG,QACR,OACI,kBAAC4D,EAAA,EAAD,CAAMxD,UAAWJ,EAAQoD,KAAM3C,QAAQ,YACvC,kBAACoD,EAAA,EAAD,KACE,kBAACtD,EAAA,EAAD,CAAYE,QAAQ,KAAKqD,UAAU,MAChC7D,KAAKJ,MAAMkE,mB,GARDrD,aAkBRC,cAAWuC,EAAXvC,CAAsBgD,G,iBCoBtBK,E,kDAtDb,WAAYnE,GAAO,IAAD,8BAChB,cAAMA,IAORyC,mBAAqB,SAAC2B,GACpB,EAAKC,SAAS,CACZC,UAAWF,EAAEG,OAAOC,SAVN,EAclBC,WAAa,WAEX,GAA6B,KAAzB,EAAKC,MAAMJ,UAAf,CAKA,IAAMK,EAAa,CACjBC,KAAM,EAAKF,MAAMJ,WAEnBO,IAAMC,KAAN,gDAA2DH,GACtDI,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAASG,MACrB,EAAKd,SAAS,CACVH,YAAac,EAASG,UAG7BC,OAAM,SAAAC,GACHJ,QAAQC,IAAI,6BAA8BG,WAhBhDC,MAAM,+BAfR,EAAKZ,MAAQ,CACXJ,UAAW,GACXJ,YAAa,IAJC,E,qDAsClB,OACE,kBAACpC,EAAA,EAAD,CAAMD,WAAS,EAAC0D,UAAU,UAC1B,kBAACzD,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,EAAD,OAEF,kBAACF,EAAA,EAAD,CAAME,MAAI,EAACH,WAAS,EAAC2D,WAAW,UAC9B,kBAAC1D,EAAA,EAAD,CAAME,MAAI,IACR,kBAAC,EAAD,CAAMa,sBAAuBzC,KAAKqE,WAAYhC,mBAAoBrC,KAAKqC,sBAEzE,kBAACX,EAAA,EAAD,CAAME,MAAI,IACR,kBAAC,EAAD,CAAUkC,YAAa9D,KAAKsE,MAAMR,mB,GAlDxBrD,aCKE4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMmB,c","file":"static/js/main.a3ec427d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core'\n\nconst useStyles = theme => ({\n    nav: {\n        background: \"#121212\",\n        // boxShadow: \"none\",\n        // marginBottom: \"15px\",\n    },\n    title: {\n        textAlign : \"center\",\n    }\n});\n\nclass Header extends Component{\n  constructor(props){\n      super(props)\n      sessionStorage.setItem(\"summary\", \"\")\n  }\n\n  render(){\n  const { classes } = this.props\n  return (\n    <div>\n      <AppBar position=\"static\" className={classes.nav}>\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\">\n            Text Summarizer \n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n  }\n}\nexport default withStyles(useStyles)(Header);","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid';\nimport { Container, Typography } from '@material-ui/core';\n\n\nconst styles = theme => ({\n\n    inputbox: {\n        width: \"100%\",\n        maxWidth: \"50vw\",\n        position : \"absolute\",\n\n    },\n    preview: {\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        background: '#2E3B55',\n        color: 'white',\n        '&:hover': {\n            background: '#586481',\n        },\n    },\n    deleteB: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        background: '#93160d',\n        color: 'white',\n        '&:hover': {\n            background: '#ca4b35',\n        }\n\n\n    },\n    container: {\n        margin: 'auto',\n        maxWidth: '1400px'\n    },\n})\n\n\nclass Text extends Component {\n\n    returnTheme = () => {\n        const theme = createMuiTheme({\n            palette: {\n                primary: {\n                    main: '#2E3B55',\n                },\n            },\n        });\n        return theme\n    }\n\n\n    showTitle = () => {\n            return <Typography variant='h5' style={{ marginBottom: '0%', marginTop: '1%' }}> Enter Text to Summarize Here! </Typography>\n        }\n\n\n    render() {\n        const { classes } = this.props\n        return (\n            <div >\n                {this.showTitle()}\n                <Container className={classes.container}>\n\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} sm={5}>\n                            <ThemeProvider theme={this.returnTheme()}>\n                                <TextField\n                                    id=\"review\"\n                                    label=\"Text\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    onChange={this.props.inputChangeHandler}\n                                    className={classes.inputbox}\n                                />                               \n                            </ThemeProvider>\n                        </Grid>\n                    </Grid>\n                </Container>\n                <br/>\n                <br/>\n                <br/>\n                <Button onClick={this.props.requestSummaryHandler} className={classes.preview}> Get Summary </Button>\n            </div >\n        );\n    }\n}\n\nexport default withStyles(styles)(Text); \n","import React, {Component} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withStyles} from '@material-ui/core';\n\n\nconst useStyles = makeStyles({\n    root: {\n      minWidth: 275,\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n  });\n\nclass TextCard extends Component{\n\n  render(){\n    const { classes } = this.props\n    return (\n        <Card className={classes.root} variant=\"outlined\">\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            {this.props.summaryText}\n          </Typography>\n        </CardContent>\n      </Card>\n    )\n  }\n}\n\n\n  \nexport default withStyles(useStyles)(TextCard);","import React, {Component} from 'react';\nimport Header from './components/Header';\nimport { Grid } from \"@material-ui/core\";\nimport Text from './components/Text';\nimport TextCard from './components/TextCard';\nimport axios from 'axios';\n\nclass App extends Component{\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      userInput: \"\",\n      summaryText: \"\"\n    }\n  }\n\n  inputChangeHandler = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n  };\n\n  getSummary = () => {\n\n    if (this.state.userInput === \"\"){\n      alert(\"You didn't enter any text!\");\n      return;\n    }\n    \n    const reviewJSON = {\n      text: this.state.userInput\n    }\n    axios.post(`https://summarizeruwu.herokuapp.com/summarize`,reviewJSON)\n        .then(response => {\n            console.log(response)\n            console.log(response.data)\n            this.setState({\n                summaryText: response.data\n            })\n        })\n        .catch(error => {\n            console.log(\"ERROR in Category loading \", error)\n        }) //update with correct string\n  };\n\n  render(){\n  return (\n    <Grid container direction=\"column\">\n    <Grid item>\n      <Header />\n    </Grid>\n    <Grid item container alignItems=\"center\">\n      <Grid item/>\n        <Text requestSummaryHandler={this.getSummary} inputChangeHandler={this.inputChangeHandler}/>\n      </Grid>\n      <Grid item/>\n        <TextCard summaryText={this.state.summaryText}/>\n    </Grid>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}